/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import model.AGL;

import org.codehaus.plexus.util.CollectionUtils;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import data.DatabaseConnection;

import static org.junit.Assert.*;

/**
 *
 * @author Turing
 */
public class AglDAOTest {
    
    public AglDAOTest() {
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }
 
    
    /**
     * Test of getMinMaxIDs method, of class AglDAO.
     * @throws Exception 
     */
    @Test
    public void testGetMinMaxIDs() throws Exception {
        AglDAO instance = new AglDAO();
        AGL expResult = new AGL();
        AGL result = instance.getMinMaxIDs();

        String SQL="select min(agl_id), max(agl_id) from ssts.autogeneratedlessons";
		ResultSet rs= DatabaseConnection.getInstance().getValues(SQL);
		if (rs.next()) {
			expResult.setMinID(Integer.parseInt(rs.getString("min(agl_id)")));	
			expResult.setMaxID(Integer.parseInt(rs.getString("max(agl_id)")));	
		}        
      
      assertEquals(expResult.getMinID(), result.getMinID());
      assertEquals(expResult.getMaxID(), result.getMaxID());
    }

    /**
     * Test of addAGL method, of class AglDAO.
     * @throws Exception 
     * @throws SQLException 
     */
    @Test
    public void testAddAGL() throws SQLException, Exception {
        AGL agl = new AGL();
        AGL tempAgl = new AGL();        
        AglDAO instance = new AglDAO();
        
        tempAgl = instance.getAGLById("1");
        
        agl.setAglFor(tempAgl.getAglFor());
        agl.setAglWord(tempAgl.getAglWord());
        agl.setAglLesson(tempAgl.getAglLesson());
        
        instance.addAGL(agl);

		   String SQLInsert = ("insert into autogeneratedlessons(agl_for, agl_word, agl_lesson, gen_on) values (?, ?,?, CURDATE())");		   

	            PreparedStatement preparedStatement = DatabaseConnection.getInstance().getConnection().prepareStatement(SQLInsert);
	            // Parameters start with 1
	            preparedStatement.setString(1, agl.getAglFor());
	            preparedStatement.setString(2, agl.getAglWord());    
	            preparedStatement.setString(3, agl.getAglLesson());       	            
	            preparedStatement.executeUpdate();        
	            
	            assertEquals(agl.getAglFor(), tempAgl.getAglFor());
	            assertEquals(agl.getAglWord(), tempAgl.getAglWord());
	            assertEquals(agl.getAglLesson(), tempAgl.getAglLesson());
    }

    /**
     * Test of updateAGL method, of class AglDAO.
     * @throws Exception 
     * @throws SQLException 
     */
    @Test
    public void testUpdateAGL() throws SQLException, Exception {
        AGL agl = new AGL();
        AGL tempAgl = new AGL();
        AglDAO instance = new AglDAO();
        
        tempAgl = instance.getAGLById("1");
        
        agl.setAglWord(tempAgl.getAglWord());
        agl.setAglFor(tempAgl.getAglFor());
        agl.setAglID(tempAgl.getAglID());
        
        instance.updateAGL(agl);

        assertEquals(agl.getAglWord(), tempAgl.getAglWord());
        assertEquals(agl.getAglFor(), tempAgl.getAglFor());
        assertEquals(agl.getAglID(), tempAgl.getAglID());
            
    }

    /**
     * Test of getAllAGLs method, of class AglDAO.
     * @throws Exception 
     * @throws SQLException 
     */
    @Test
    public void testGetAllAGLs() throws SQLException, Exception {
        AglDAO instance = new AglDAO();
        List<AGL> expResult = null;
        List<AGL> result = instance.getAllAGLs();
        
        
        List<AGL> agls = new ArrayList<AGL>();

            Statement statement =  DatabaseConnection.getInstance().getConnection().createStatement();
            ResultSet rs = statement.executeQuery("SELECT agl_id, agl_for, (SELECT user_name FROM ssts.users where user_id= autogeneratedlessons.agl_for), agl_word, agl_lesson, gen_on, updateTime FROM ssts.autogeneratedlessons");
            while (rs.next()) {
            	AGL agl = new AGL();
            	agl.setAglID(rs.getString("agl_id"));
            	agl.setAglFor(rs.getString("agl_for"));	            	
            	agl.setAglForName(rs.getString("(SELECT user_name FROM ssts.users where user_id= autogeneratedlessons.agl_for)"));
            	agl.setAglWord(rs.getString("agl_word"));
            	agl.setAglLesson(rs.getString("agl_lesson"));
            	agl.setGenOn(rs.getString("gen_on"));	                
                
            	agls.add(agl);
            }        

            expResult= agls;
            		
        assertEquals(expResult.size(), result.size());


    }

    /**
     * Test of getAGLById method, of class AglDAO.
     * @throws Exception 
     * @throws SQLException 
     */
    @Test
    public void testGetAGLById() throws SQLException, Exception {
        String aglID = "1";
        AglDAO instance = new AglDAO();
        AGL expResult = new AGL();
        AGL result = instance.getAGLById(aglID);
        
        PreparedStatement preparedStatement = DatabaseConnection.getInstance().getConnection().prepareStatement("select * from autogeneratedlessons where agl_id=?");
        preparedStatement.setString(1, aglID);
        ResultSet rs = preparedStatement.executeQuery();

        if (rs.next()) {
        	expResult.setAglID(rs.getString("agl_id"));
        	expResult.setAglFor(rs.getString("agl_for"));	            	
        	expResult.setAglWord(rs.getString("agl_word"));
        	expResult.setAglLesson(rs.getString("agl_lesson"));
        	expResult.setGenOn(rs.getString("gen_on"));			

        }        
        
        assertEquals(expResult.getAglID(), result.getAglID());
        assertEquals(expResult.getAglFor(), result.getAglFor());
        assertEquals(expResult.getAglWord(), result.getAglWord());
        assertEquals(expResult.getAglLesson(), result.getAglLesson());
        assertEquals(expResult.getGenOn(), result.getGenOn());

    }

    
}
